//
// Generated file, do not edit! Created by opp_msgtool 6.0 from transactionSendMsg.msg.
//

#ifndef __TRANSACTIONSENDMSG_M_H
#define __TRANSACTIONSENDMSG_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class transactionSendMsg;
#include "routerMsg_m.h" // import routerMsg

/**
 * Class generated from <tt>transactionSendMsg.msg:33</tt> by opp_msgtool.
 * <pre>
 * packet transactionSendMsg
 * {
 *     int pathIndex;
 *     IntVector transactionPath;
 *     int receiver;
 * 
 * }
 * </pre>
 */
class transactionSendMsg : public ::omnetpp::cPacket
{
  protected:
    int pathIndex = 0;
    IntVector transactionPath;
    int receiver = 0;

  private:
    void copy(const transactionSendMsg& other);

  protected:
    bool operator==(const transactionSendMsg&) = delete;

  public:
    transactionSendMsg(const char *name=nullptr, short kind=0);
    transactionSendMsg(const transactionSendMsg& other);
    virtual ~transactionSendMsg();
    transactionSendMsg& operator=(const transactionSendMsg& other);
    virtual transactionSendMsg *dup() const override {return new transactionSendMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getPathIndex() const;
    virtual void setPathIndex(int pathIndex);

    virtual const IntVector& getTransactionPath() const;
    virtual IntVector& getTransactionPathForUpdate() { return const_cast<IntVector&>(const_cast<transactionSendMsg*>(this)->getTransactionPath());}
    virtual void setTransactionPath(const IntVector& transactionPath);

    virtual int getReceiver() const;
    virtual void setReceiver(int receiver);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const transactionSendMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, transactionSendMsg& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline transactionSendMsg *fromAnyPtr(any_ptr ptr) { return check_and_cast<transactionSendMsg*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __TRANSACTIONSENDMSG_M_H

