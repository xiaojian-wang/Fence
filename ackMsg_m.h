//
// Generated file, do not edit! Created by opp_msgtool 6.0 from ackMsg.msg.
//

#ifndef __ACKMSG_M_H
#define __ACKMSG_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class ackMsg;
/**
 * Class generated from <tt>ackMsg.msg:18</tt> by opp_msgtool.
 * <pre>
 * packet ackMsg
 * {
 *     int transactionId;
 *     int receiver;
 *     int htlcIndex;
 *     int pathIndex;
 *     double timeSent;
 *     bool isSuccess; //status, true for success, false for failure
 *     int failedHopNum;
 *     string secret = "";
 *     double amount;
 *     int priorityClass;
 *     bool hasTimeOut;
 *     double timeOut;
 *     double largerTxnId;
 *     bool isMarked;
 *     double timeAttempted;
 *     double tx_fee_amount;
 * }
 * </pre>
 */
class ackMsg : public ::omnetpp::cPacket
{
  protected:
    int transactionId = 0;
    int receiver = 0;
    int htlcIndex = 0;
    int pathIndex = 0;
    double timeSent = 0;
    bool isSuccess_ = false;
    int failedHopNum = 0;
    omnetpp::opp_string secret = "";
    double amount = 0;
    int priorityClass = 0;
    bool hasTimeOut = false;
    double timeOut = 0;
    double largerTxnId = 0;
    bool isMarked_ = false;
    double timeAttempted = 0;
    double tx_fee_amount = 0;

  private:
    void copy(const ackMsg& other);

  protected:
    bool operator==(const ackMsg&) = delete;

  public:
    ackMsg(const char *name=nullptr, short kind=0);
    ackMsg(const ackMsg& other);
    virtual ~ackMsg();
    ackMsg& operator=(const ackMsg& other);
    virtual ackMsg *dup() const override {return new ackMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getTransactionId() const;
    virtual void setTransactionId(int transactionId);

    virtual int getReceiver() const;
    virtual void setReceiver(int receiver);

    virtual int getHtlcIndex() const;
    virtual void setHtlcIndex(int htlcIndex);

    virtual int getPathIndex() const;
    virtual void setPathIndex(int pathIndex);

    virtual double getTimeSent() const;
    virtual void setTimeSent(double timeSent);

    virtual bool isSuccess() const;
    virtual void setIsSuccess(bool isSuccess);

    virtual int getFailedHopNum() const;
    virtual void setFailedHopNum(int failedHopNum);

    virtual const char * getSecret() const;
    virtual void setSecret(const char * secret);

    virtual double getAmount() const;
    virtual void setAmount(double amount);

    virtual int getPriorityClass() const;
    virtual void setPriorityClass(int priorityClass);

    virtual bool getHasTimeOut() const;
    virtual void setHasTimeOut(bool hasTimeOut);

    virtual double getTimeOut() const;
    virtual void setTimeOut(double timeOut);

    virtual double getLargerTxnId() const;
    virtual void setLargerTxnId(double largerTxnId);

    virtual bool isMarked() const;
    virtual void setIsMarked(bool isMarked);

    virtual double getTimeAttempted() const;
    virtual void setTimeAttempted(double timeAttempted);

    virtual double getTx_fee_amount() const;
    virtual void setTx_fee_amount(double tx_fee_amount);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ackMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ackMsg& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline ackMsg *fromAnyPtr(any_ptr ptr) { return check_and_cast<ackMsg*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __ACKMSG_M_H

