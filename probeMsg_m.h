//
// Generated file, do not edit! Created by opp_msgtool 6.0 from probeMsg.msg.
//

#ifndef __PROBEMSG_M_H
#define __PROBEMSG_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class probeMsg;
#include "routerMsg_m.h" // import routerMsg

#include "transactionMsg_m.h" // import transactionMsg

// cplusplus {{
//#include <vector>
//#include <map>
////typedef std::vector<int> IntVector;
//typedef std::vector<double> DoubleVector;
////typedef std::map<int, double> IntMap_2;
//
// }}

/**
 * Class generated from <tt>probeMsg.msg:36</tt> by opp_msgtool.
 * <pre>
 * packet probeMsg
 * {
 *     int pathIndex;
 *     int sender;
 *     int receiver;
 *     bool isReversed = false;
 *     DoubleVector pathBalances;
 *     IntVector path;
 *     int transactionId; //used only for landmark routing
 * }
 * </pre>
 */
class probeMsg : public ::omnetpp::cPacket
{
  protected:
    int pathIndex = 0;
    int sender = 0;
    int receiver = 0;
    bool isReversed_ = false;
    DoubleVector pathBalances;
    IntVector path;
    int transactionId = 0;

  private:
    void copy(const probeMsg& other);

  protected:
    bool operator==(const probeMsg&) = delete;

  public:
    probeMsg(const char *name=nullptr, short kind=0);
    probeMsg(const probeMsg& other);
    virtual ~probeMsg();
    probeMsg& operator=(const probeMsg& other);
    virtual probeMsg *dup() const override {return new probeMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getPathIndex() const;
    virtual void setPathIndex(int pathIndex);

    virtual int getSender() const;
    virtual void setSender(int sender);

    virtual int getReceiver() const;
    virtual void setReceiver(int receiver);

    virtual bool isReversed() const;
    virtual void setIsReversed(bool isReversed);

    virtual const DoubleVector& getPathBalances() const;
    virtual DoubleVector& getPathBalancesForUpdate() { return const_cast<DoubleVector&>(const_cast<probeMsg*>(this)->getPathBalances());}
    virtual void setPathBalances(const DoubleVector& pathBalances);

    virtual const IntVector& getPath() const;
    virtual IntVector& getPathForUpdate() { return const_cast<IntVector&>(const_cast<probeMsg*>(this)->getPath());}
    virtual void setPath(const IntVector& path);

    virtual int getTransactionId() const;
    virtual void setTransactionId(int transactionId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const probeMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, probeMsg& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline probeMsg *fromAnyPtr(any_ptr ptr) { return check_and_cast<probeMsg*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __PROBEMSG_M_H

